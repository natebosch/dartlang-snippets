global !p
from dartlang_snippets import ensure_import
endglobal

snippet main "Dart main method" b
void main() {
	$0
}
endsnippet

snippet ident "Anonymous identity method" w
(${1:_}) => $1
endsnippet

snippet class "Class outline" b
class $1 {
	$0
}
endsnippet

snippet di "Dart import" b
import 'dart:${1:async}';
endsnippet

snippet im "Import" b
import 'package:$1/${2:$1}.dart';
endsnippet

snippet for "For-in loop" b
for(var $1 in ${2:$1s}) {
	$0
}
endsnippet

snippet fori "indexed for loop" b
for(int i = 0, ${3:l} = $2.length; i<$3; i++) {
	var $1 = ${2:$1s}[i];
	$0
}
endsnippet

snippet try "Try/catch block" b
try {
	${1:${VISUAL}}
} catch(${2:e}${3:, st}) {
	$4
}
endsnippet

snippet if "If block" b
if ($1) {
	${2:${VISUAL}}
}
endsnippet

snippet set "Field setter" b
set $1($2 $1) {
	${3:_$1 = $1;}
}
endsnippet

snippet get "Simple field getter" b
$1 get $2 => ${3:_$2};
endsnippet

snippet gett "Field getter with more logic" b
$1 get $2 {
	$3
}
endsnippet

snippet getl "Field with lazy initialization" b
$1 _$2;
${1} get ${2} => _$2 ?? ${3:_init${2/.*/\u$0/}()};
endsnippet

snippet aget "Async field getter" b
Future<$1> get $2 async => ${3:_$2};
endsnippet

snippet agett "Async field getter with more logic" b
Future<$1> get $2 async {
	$3
}
endsnippet

pre_expand "ensure_import('dart:async', snip)"
snippet gets "Stream field with a controller" b
Stream<${2:void}> get ${1} => ${3:$4.stream;
final ${4:_$1} = StreamController<$2>();}
endsnippet

snippet m "Anonymous method" w
($1) {
	$0
}
endsnippet

snippet r "Anonymous single statement return" w
($1) => $0
endsnippet

snippet am "Async anonymous method" w
($1) async {
	$0
}
endsnippet

snippet ar "Async anonymous single statement method" w
($1) async => $0
endsnippet

priority 1
snippet m "Instance or top level method" b
${1:void} $2($3) {
	$0
}
endsnippet
snippet r "Single statement return" b
$1 $2($3) => $0;
endsnippet

snippet am "Async instance or top level method" b
Future<${1:void}> $2($3) async {
	$0
}
endsnippet

snippet ar "Async single statement return" b
Future<$1> $2($3) async => $0;
endsnippet
