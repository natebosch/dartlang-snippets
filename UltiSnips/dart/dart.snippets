global !p
from dartlang_snippets import ensure_import
endglobal

snippet main "Dart main method" b
void main() {
	$0
}
endsnippet

snippet ident "Anonymous identiy method" w
(${1:_}) => $1
endsnippet

snippet class "Class outline" b
class $1 {
	$0
}
endsnippet

snippet di "Dart import" b
import 'dart:${1:async}';
endsnippet

snippet im "Import" b
import 'package:$1';
endsnippet

snippet for "For-in loop" b
for(var $1 in ${2:$1s}) {
	$0
}
endsnippet

snippet fori "indexed for loop" b
var ${3:length} = $2.length;
for(int i=0; i<$3; i++) {
	var $1 = ${2:$1s}[i];
	$0
}
endsnippet

snippet set "Field setter" b
set $1($2 $1) {
	${0:_$1 = $1;}
}
endsnippet

snippet get "Simple field getter" b
$1 get $2 => ${3:_$2};
endsnippet

snippet gett "Field getter with more logic" b
$1 get $2 {
	$0
}
endsnippet

pre_expand "ensure_import('dart:async', snip)"
snippet geta "Async field getter" b
Future<$1> get $2 async => ${3:_$2};
endsnippet

pre_expand "ensure_import('dart:async', snip)"
snippet getta "Async field getter with more logic" b
Future<$1> get $2 async {
	$0
}
endsnippet

snippet m "Anonymous method" w
($1) {
	$0
}
endsnippet

snippet r "Anonymous single statement return" w
($1) => $0
endsnippet

snippet am "Async anonymous method" w
($1) async {
	$0
}
endsnippet

snippet ar "Async anonymous single statement method" w
($1) async => $0
endsnippet

priority 1
snippet m "Instance or top level method" b
${1:void} $2($3) {
	$0
}
endsnippet
snippet r "Single statement return" b
$1 $2($3) => $0;
endsnippet

pre_expand "ensure_import('dart:async', snip)"
snippet am "Async instance or top level method" b
Future<${1:Null}> $2($3) async {
	$0
}
endsnippet

pre_expand "ensure_import('dart:async', snip)"
snippet ar "Async single statement return" b
Future<$1> $2($3) async => $0;
endsnippet
